Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];


Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
pointvirgule= ‘;’;
si=’si’;
sinon=’sinon’;
alors=’alors’;
tantque =’tantque’;
faire= ‘faire’;
retour= ‘retour’;
ecrire=’ecrire’;
entier=’entier’;
lire=’lire’;
parentg='(';
parentd=')';
accog=’{‘;
accod=’}’;
crochetg=’[‘;
crochetd=’]’;
entier= ‘0’|’1’|’2’|’3’|’4’|’5’|’6’|’7’|’8’|’9’;
plus= '+';
moins= '-';
fois= '*';
div= '/';
inf= '<';
egal= '=';
et= '&';
ou= '|';
non= '!';



Ignored Tokens

espaces, commentaire;

Productions

programme = optdecvar listedecfonc ;

entier=entier entier;

identif=lettre;
identif=identif  identif|identif entier|entier identif;

affectation= identif egal entier | identif egal identif;
affectation= affectation operateur entier | affectation operateur identif;

si= si expression alors bloc;
si2= si sinon bloc;

tantque= tantque expresssion faire bloc;
retour= retour expression;
frpre=lecture | ecriture;
frsimple=identif parentg Lexpr parentd;
block= accog linstruction accod;
linstruction=instruction pointvirgule | {rien};
linstruction=instruction pointvirgule linstruction;

fonction=identif parentg argument parentd variable bloc;
argument=identif | identif args
args=virgule identif args
args=

variable= identif | identif vars
vars= , identif
vars=

lecture= var egal lire parentg parentd;
ecriture=ecrire parentg expression parentd;

T= entier identif crochetd crochetg|entier identif crochetd E crochetg;

E=E ou T|T;
T=T et F|F;
F=F egal U|F inf U|U;
U=U plus V|U moins V|V;
V=V fois J|V div J|J;
J=non I|I;
I=parentgEparentd| entier | fonction;
